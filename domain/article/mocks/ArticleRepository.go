// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	article "github.com/madeindra/devoria-workshop-to-challenge/domain/article"

	mock "github.com/stretchr/testify/mock"
)

// ArticleRepository is an autogenerated mock type for the ArticleRepository type
type ArticleRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *ArticleRepository) Create(ctx context.Context, _a1 article.Article) (int64, error) {
	ret := _m.Called(ctx, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, article.Article) int64); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, article.Article) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *ArticleRepository) FindAll(ctx context.Context) ([]article.Article, error) {
	ret := _m.Called(ctx)

	var r0 []article.Article
	if rf, ok := ret.Get(0).(func(context.Context) []article.Article); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]article.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByAuthorId provides a mock function with given fields: ctx, authorId
func (_m *ArticleRepository) FindAllByAuthorId(ctx context.Context, authorId int64) ([]article.Article, error) {
	ret := _m.Called(ctx, authorId)

	var r0 []article.Article
	if rf, ok := ret.Get(0).(func(context.Context, int64) []article.Article); ok {
		r0 = rf(ctx, authorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]article.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, authorId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *ArticleRepository) FindByID(ctx context.Context, ID int64) (article.Article, error) {
	ret := _m.Called(ctx, ID)

	var r0 article.Article
	if rf, ok := ret.Get(0).(func(context.Context, int64) article.Article); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(article.Article)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ID, _a2
func (_m *ArticleRepository) Update(ctx context.Context, ID int64, _a2 article.Article) error {
	ret := _m.Called(ctx, ID, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, article.Article) error); ok {
		r0 = rf(ctx, ID, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
