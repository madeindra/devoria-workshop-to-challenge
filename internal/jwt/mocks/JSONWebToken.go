// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	jwt "github.com/dgrijalva/jwt-go"

	mock "github.com/stretchr/testify/mock"
)

// JSONWebToken is an autogenerated mock type for the JSONWebToken type
type JSONWebToken struct {
	mock.Mock
}

// Parse provides a mock function with given fields: ctx, tokenString, claims
func (_m *JSONWebToken) Parse(ctx context.Context, tokenString string, claims jwt.Claims) (*jwt.Token, error) {
	ret := _m.Called(ctx, tokenString, claims)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(context.Context, string, jwt.Claims) *jwt.Token); ok {
		r0 = rf(ctx, tokenString, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, jwt.Claims) error); ok {
		r1 = rf(ctx, tokenString, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sign provides a mock function with given fields: ctx, claims
func (_m *JSONWebToken) Sign(ctx context.Context, claims jwt.Claims) (string, error) {
	ret := _m.Called(ctx, claims)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, jwt.Claims) string); ok {
		r0 = rf(ctx, claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, jwt.Claims) error); ok {
		r1 = rf(ctx, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
